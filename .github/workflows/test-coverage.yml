name: Test Coverage

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  coverage:
    name: Test Coverage Report
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Generate coverage summary
        id: coverage
        run: |
          # Read the coverage summary
          COVERAGE_JSON=$(cat coverage/coverage-summary.json)
          
          # Extract metrics using jq
          LINES_PCT=$(echo "$COVERAGE_JSON" | jq -r '.total.lines.pct')
          STATEMENTS_PCT=$(echo "$COVERAGE_JSON" | jq -r '.total.statements.pct')
          FUNCTIONS_PCT=$(echo "$COVERAGE_JSON" | jq -r '.total.functions.pct')
          BRANCHES_PCT=$(echo "$COVERAGE_JSON" | jq -r '.total.branches.pct')
          
          LINES_COVERED=$(echo "$COVERAGE_JSON" | jq -r '.total.lines.covered')
          LINES_TOTAL=$(echo "$COVERAGE_JSON" | jq -r '.total.lines.total')
          STATEMENTS_COVERED=$(echo "$COVERAGE_JSON" | jq -r '.total.statements.covered')
          STATEMENTS_TOTAL=$(echo "$COVERAGE_JSON" | jq -r '.total.statements.total')
          FUNCTIONS_COVERED=$(echo "$COVERAGE_JSON" | jq -r '.total.functions.covered')
          FUNCTIONS_TOTAL=$(echo "$COVERAGE_JSON" | jq -r '.total.functions.total')
          BRANCHES_COVERED=$(echo "$COVERAGE_JSON" | jq -r '.total.branches.covered')
          BRANCHES_TOTAL=$(echo "$COVERAGE_JSON" | jq -r '.total.branches.total')
          
          # Create summary for GitHub Actions Summary
          echo "## Test Coverage Report üìä" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Coverage | Covered/Total |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|----------|---------------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Lines** | ${LINES_PCT}% | ${LINES_COVERED}/${LINES_TOTAL} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Statements** | ${STATEMENTS_PCT}% | ${STATEMENTS_COVERED}/${STATEMENTS_TOTAL} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Functions** | ${FUNCTIONS_PCT}% | ${FUNCTIONS_COVERED}/${FUNCTIONS_TOTAL} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Branches** | ${BRANCHES_PCT}% | ${BRANCHES_COVERED}/${BRANCHES_TOTAL} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Determine coverage status emoji
          if (( $(echo "$LINES_PCT >= 80" | bc -l) )); then
            EMOJI="‚úÖ"
          elif (( $(echo "$LINES_PCT >= 60" | bc -l) )); then
            EMOJI="‚ö†Ô∏è"
          else
            EMOJI="‚ùå"
          fi
          
          # Create PR comment body
          COMMENT_BODY="## Test Coverage Report ${EMOJI}

          | Metric | Coverage | Covered/Total |
          |--------|----------|---------------|
          | **Lines** | ${LINES_PCT}% | ${LINES_COVERED}/${LINES_TOTAL} |
          | **Statements** | ${STATEMENTS_PCT}% | ${STATEMENTS_COVERED}/${STATEMENTS_TOTAL} |
          | **Functions** | ${FUNCTIONS_PCT}% | ${FUNCTIONS_COVERED}/${FUNCTIONS_TOTAL} |
          | **Branches** | ${BRANCHES_PCT}% | ${BRANCHES_COVERED}/${BRANCHES_TOTAL} |

          <details>
          <summary>Coverage Thresholds</summary>

          The project has the following coverage thresholds configured:
          - Lines: 38%
          - Statements: 38%
          - Functions: 35%
          - Branches: 30%

          </details>

          ---
          *Coverage report generated by \\\`npm run test:coverage\\\`*"
          
          # Save for next step (escape newlines for GitHub Actions)
          echo "COMMENT_BODY<<EOF" >> $GITHUB_ENV
          echo "$COMMENT_BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Also save individual metrics as outputs
          echo "lines_pct=${LINES_PCT}" >> $GITHUB_OUTPUT
          echo "statements_pct=${STATEMENTS_PCT}" >> $GITHUB_OUTPUT
          echo "functions_pct=${FUNCTIONS_PCT}" >> $GITHUB_OUTPUT
          echo "branches_pct=${BRANCHES_PCT}" >> $GITHUB_OUTPUT

      - name: Comment PR with coverage report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commentBody = process.env.COMMENT_BODY;
            
            // Find existing coverage comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Test Coverage Report')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

      - name: Upload coverage reports
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: coverage-report
          path: |
            coverage/
          retention-days: 30

      - name: Check coverage thresholds
        run: |
          echo "Checking if coverage meets minimum thresholds..."
          # Jest will fail if coverage is below thresholds defined in jest.config.js
          # This step is informational since the test:coverage command already checks
